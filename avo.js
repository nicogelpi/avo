// Generated by Avo VERSION 48.30.0, PLEASE EDIT WITH CARE
/* eslint-disable */

// fetch() polyfill
(function () {
    if (typeof window === 'undefined') {
      return;
    }
    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob:
        'FileReader' in self &&
        'Blob' in self &&
        (function() {
          try {
            new Blob();
            return true
          } catch (e) {
            return false
          }
        })(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };
  
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }
  
    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ];
  
      var isArrayBufferView =
        ArrayBuffer.isView ||
        function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        };
    }
  
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name')
      }
      return name.toLowerCase()
    }
  
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value
    }
  
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift();
          return {done: value === undefined, value: value}
        }
      };
  
      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        };
      }
  
      return iterator
    }
  
    function Headers(headers) {
      this.map = {};
  
      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
  
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
  
    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)];
    };
  
    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null
    };
  
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    };
  
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
  
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
  
    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items)
    };
  
    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items)
    };
  
    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items)
    };
  
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
  
    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true;
    }
  
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      })
    }
  
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise
    }
  
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise
    }
  
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
  
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('')
    }
  
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer
      }
    }
  
    function Body() {
      this.bodyUsed = false;
  
      this._initBody = function(body) {
        this._bodyInit = body;
        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }
  
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };
  
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }
  
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        };
  
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
          } else {
            return this.blob().then(readBlobAsArrayBuffer)
          }
        };
      }
  
      this.text = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }
  
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      };
  
      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        };
      }
  
      this.json = function() {
        return this.text().then(JSON.parse)
      };
  
      return this
    }
  
    // HTTP methods whose capitalization should be normalized
    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
  
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method
    }
  
    function Request(input, options) {
      options = options || {};
      var body = options.body;
  
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
  
      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;
  
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body);
    }
  
    Request.prototype.clone = function() {
      return new Request(this, {body: this._bodyInit})
    };
  
    function decode(body) {
      var form = new FormData();
      body
        .trim()
        .split('&')
        .forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
      return form
    }
  
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers
    }
  
    Body.call(Request.prototype);
  
    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }
  
      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }
  
    Body.call(Response.prototype);
  
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    };
  
    Response.error = function() {
      var response = new Response(null, {status: 0, statusText: ''});
      response.type = 'error';
      return response
    };
  
    var redirectStatuses = [301, 302, 303, 307, 308];
  
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }
  
      return new Response(null, {status: status, headers: {location: url}})
    };
  
    self.DOMException = self.DOMException;
    try {
      new self.DOMException();
    } catch (err) {
      self.DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      self.DOMException.prototype = Object.create(Error.prototype);
      self.DOMException.prototype.constructor = self.DOMException;
    }
  
    function fetch(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);
  
        if (request.signal && request.signal.aborted) {
          return reject(new self.DOMException('Aborted', 'AbortError'))
        }
  
        var xhr = new XMLHttpRequest();
  
        function abortXhr() {
          xhr.abort();
        }
  
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };
  
        xhr.onerror = function() {
          reject(new TypeError('Network request failed'));
        };
  
        xhr.ontimeout = function() {
          reject(new TypeError('Network request failed'));
        };
  
        xhr.onabort = function() {
          reject(new self.DOMException('Aborted', 'AbortError'));
        };
  
        xhr.open(request.method, request.url, true);
  
        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }
  
        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }
  
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
  
        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);
  
          xhr.onreadystatechange = function() {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }
  
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      })
    }
  
    fetch.polyfill = true;
  
    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }
  })();
  
  (function(exports) {
    var __AVO_DEV__ = false;
    var __AVO_ENV__ = null;
    var __REPORT_FAILURE_AS__ = null;
    var __STRICT__ = null;
  
    var __WEB_DEBUGGER__ = true;
  
    // polyfill Array.isArray
    if (!Array.isArray) {
      Array.isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
      };
    }
  
    // polyfill Object.assign
    if (typeof Object.assign !== 'function') {
      // Must be writable: true, enumerable: false, configurable: true
      Object.defineProperty(Object, "assign", {
        value: function assign(target, varArgs) { // .length of function is 2
          if (target == null) { // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
          }
  
          var to = Object(target);
  
          for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];
  
            if (nextSource != null) { // Skip over if undefined or null
              for (var nextKey in nextSource) {
                // Avoid bugs when hasOwnProperty is shadowed
                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
          }
          return to;
        },
        writable: true,
        configurable: true
      });
    }
  
    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    if (!Object.keys) {
      Object.keys = (function() {
        'use strict';
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
            dontEnums = [
              'toString',
              'toLocaleString',
              'valueOf',
              'hasOwnProperty',
              'isPrototypeOf',
              'propertyIsEnumerable',
              'constructor'
            ],
            dontEnumsLength = dontEnums.length;
  
        return function(obj) {
          if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {
            throw new TypeError('Object.keys called on non-object');
          }
  
          var result = [], prop, i;
  
          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }
  
          if (hasDontEnumBug) {
            for (i = 0; i < dontEnumsLength; i++) {
              if (hasOwnProperty.call(obj, dontEnums[i])) {
                result.push(dontEnums[i]);
              }
            }
          }
          return result;
        };
      }());
    }
  
    // polyfill Array.indexOf
    if (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){
      "use strict";
      return function indexOf(member, fromIndex) {
        if(this===null||this===undefined)throw TypeError("Array.prototype.indexOf called on null or undefined");
  
        var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);
        if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;
  
        if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined
        }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN
        }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else
  
        return -1; // if the value was not found, then return -1
      };
    })(Object, Math.max, Math.min);
  
    var array_difference, AvoAssert, AvoLogger;
    array_difference = function array_difference(a1, a2) {
      var result = [];
      for (var i = 0; i < a1.length; i++) {
        if (a2.indexOf(a1[i]) === -1) {
          result.push(a1[i]);
        }
      }
      return result;
    }
  
    AvoAssert = {
      assertObject: function assertObject(propertyId, propName, obj) {
        if (typeof obj !== 'object') {
          var message = propName +
            ' should be of type object but you provided type ' +
            typeof obj +
            ' with value ' +
            JSON.stringify(obj);
          return [{tag: 'expectedObjectType', propertyId: propertyId, message: message, actualType: typeof obj}];
        } else {
          return [];
        }
      },
  
      assertString: function assertString(propertyId, propName, str) {
        if (typeof str !== 'string') {
          var message = propName +
            ' should be of type string but you provided type ' +
            typeof str +
            ' with value ' +
            JSON.stringify(str);
          return [{tag: 'expectedStringType', propertyId: propertyId, message: message, actualType: typeof str}];
        } else {
          return [];
        }
      },
  
      assertInt: function assertInt(propertyId, propName, int) {
        if (typeof int === 'number' && int !== Math.round(int)) {
          var message = propName +
            ' should be of type int but you provided type float with value ' +
            JSON.stringify(int);
          return [{tag: 'expectedIntType', propertyId: propertyId}];
        } else if (typeof int !== 'number') {
          var message = propName +
            ' should be of type int but you provided type ' +
            typeof int +
            ' with value ' +
            JSON.stringify(int);
          return [{tag: 'expectedIntType', propertyId: propertyId, message: message, actualType: typeof int}];
        } else {
          return [];
        }
      },
  
      assertLong: function assertLong(propertyId, propName, long) {
        if (typeof long === 'number' && long !== Math.round(long)) {
          var message = propName +
            ' should be of type long but you provided type float with value ' +
            JSON.stringify(long);
          return [{tag: 'expectedLongType', propertyId: propertyId}];
        } else if (typeof long !== 'number') {
          var message = propName +
            ' should be of type long but you provided type ' +
            typeof long +
            ' with value ' +
            JSON.stringify(long);
          return [{tag: 'expectedLongType', propertyId: propertyId, message: message, actualType: typeof long}];
        } else {
          return [];
        }
      },
  
      assertFloat: function assertFloat(propertyId, propName, float) {
        if (typeof float !== 'number') {
          var message = propName +
            ' should be of type float but you provided type ' +
            typeof float +
            ' with value ' +
            JSON.stringify(float);
          return [{tag: 'expectedFloatType', propertyId: propertyId, message: message, actualType: typeof float}];
        } else {
          return [];
        }
      },
  
      assertBool: function assertBool(propertyId, propName, bool) {
        if (typeof bool !== 'boolean') {
          var message = propName +
            ' should be of type boolean but you provided type ' +
            typeof bool +
            ' with value ' +
            JSON.stringify(bool);
          return [{tag: 'expectedBoolType', propertyId: propertyId, message: message, actualType: typeof bool}];
        } else {
          return [];
        }
      },
  
      assertMax: function assertMax(propertyId, propName, max, value) {
        if (value > max) {
          var message = propName +
            ' has a maximum value of ' +
            max +
            ' but you provided the value ' +
            JSON.stringify(value);
          return [{tag: 'expectedMax', propertyId: propertyId, message: message}];
        } else {
          return [];
        }
      },
  
      assertMin: function assertMin(propertyId, propName, min, value) {
        if (value < min) {
          var message = propName +
            ' has a minimum value of ' +
            min +
            ' but you provided the value ' +
            JSON.stringify(value);
          return [{tag: 'expectedMin', propertyId: propertyId, message: message}];
        } else {
          return [];
        }
      },
  
      assertList: function assertList(propertyId, propName, value) {
        if (!Array.isArray(value)) {
          var message = propName + ' should be of type list but you provided type ' + typeof value;
          return [{tag: 'expectedList', propertyId: propertyId, message: message, actualType: typeof value}];
        } else {
          return [];
        }
      },
  
      assertNoAdditionalProperties: function assertNoAdditionalProperties(eventName, input, spec) {
        var additionalKeys = array_difference(input, spec);
        if (additionalKeys.length) {
          var message = "Additional properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
          return [{tag: 'expectedNoAdditionalProperties', additionalProperties: additionalKeys, message: message}];
        } else {
          return [];
        }
      },
  
      assertNoAdditionalUserProperties: function assertNoAdditionalProperties(eventName, input, spec) {
        var additionalKeys = array_difference(input, spec);
        if (additionalKeys.length) {
          var message = "Additional user properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
          return [{tag: 'expectedNoAdditionalUserProperties', additionalProperties: additionalKeys, message: message}];
        } else {
          return [];
        }
      }
    };
  
    AvoLogger = {
      logEventSent: function logEventSent(eventName, eventProperties, userProperties) {
        console.log("[avo] Event Sent:", eventName, "Event Props:", eventProperties, "User Props:", userProperties);
      }
      };
  
    var _avo_invoke, _avo_invoke_meta;
  var _avo_sampling_rate = 1.0;
  function _avo_invoke_payload(body) {
    if (typeof window === 'undefined') { return; }
    if (_avo_sampling_rate > 0) {
      if (Math.random() < _avo_sampling_rate) {
        fetch("https://api.avo.app/i", {
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify(body)
        }).then(function(res) { return res.json(); }).then(function(data) { _avo_sampling_rate = data.sa; }).catch(function() {});
      }
    }
  }
  
  _avo_invoke = function _avo_invoke(env, eventId, hash, messages, origin) {
    _avo_invoke_payload({
      "ac": "hDVgSyHqDShKlxmi1R8w",
      "br": "sHqyo1rdT",
      "en": env,
      "ev": eventId,
      "ha": hash,
      "sc": "ZMwnebQikC6pCSNEAgJH",
      "se": (new Date()).toISOString(),
      "so": "DjfmuFFQI",
      "va": messages.length === 0,
      "me": messages,
      "or": origin
    });
  }
  
  _avo_invoke_meta = function _avo_invoke_meta(env, type, messages, origin) {
    _avo_invoke_payload({
      "ac": "hDVgSyHqDShKlxmi1R8w",
      "br": "sHqyo1rdT",
      "en": env,
      "ty": type,
      "sc": "ZMwnebQikC6pCSNEAgJH",
      "se": (new Date()).toISOString(),
      "so": "DjfmuFFQI",
      "va": messages.length === 0,
      "me": messages,
      "or": origin
    });
  }
  
  
    var _avo_debugger_log;
  var _avo_debugger_events_during_boot = [];
  var _avo_debugger_ready = false;
  
  if (typeof window !== 'undefined') {
    window.addEventListener("message", function(event) {
      if (event.origin !== "https://www.avo.app") {
        return;
      }
      var iframe = document.getElementById("avo-debugger");
      if (iframe && event && event.data && event.data.type_ === "avo-debugger-update-style") {
        iframe.style = event.data.style;
      } else if (iframe && event && event.data && event.data.type_ === "avo-debugger-ready") {
        var message = {
          type_: "avo-debugger-boot-events",
          schemaId: "ZMwnebQikC6pCSNEAgJH",
          href: window.location.href,
          events: _avo_debugger_events_during_boot
        };
        _avo_debugger_events_during_boot = [];
        _avo_debugger_ready = true;
        iframe.contentWindow.postMessage(message, "https://www.avo.app/_debugger")
      }
    });
  }
  
  _avo_debugger_log = function _avo_debugger_log(eventId, eventName, messages, eventProperties, userProperties) {
    if (typeof window === 'undefined') { return; }
    var event = {
      eventId: eventId,
      eventName: eventName,
      messages: messages,
      timestamp: Date.now(),
      eventProperties: eventProperties,
      userProperties: userProperties
    };
  
    if (_avo_debugger_ready) {
      var message = {type_: "avo-debugger-events", events: [event]};
      document.getElementById("avo-debugger").contentWindow.postMessage(message, "https://www.avo.app/_debugger")
    } else {
      _avo_debugger_events_during_boot.push(event);
    }
  }
  
  
  var SegmentUXExperiments = {
    make: function make(apiKey, options) {
      if (typeof window === 'undefined') { console.warn('window.analytics is not available in Node.js'); return; }
      var analytics = window.analytics = window.analytics || [];
      if (analytics.initialize) return;
      if (analytics.invoked) {
        if (window.console && console.error) {
          console.error('Segment snippet included twice.');
        }
        return;
      }
      analytics.invoked = true;
      analytics.methods = [
        'trackSubmit',
        'trackClick',
        'trackLink',
        'trackForm',
        'pageview',
        'identify',
        'reset',
        'group',
        'track',
        'ready',
        'alias',
        'debug',
        'page',
        'once',
        'off',
        'on'
      ];
      analytics.factory = function(method){
        return function(){
          var args = Array.prototype.slice.call(arguments);
          args.unshift(method);
          analytics.push(args);
          return analytics;
        };
      };
      for (var i = 0; i < analytics.methods.length; i++) {
        var key = analytics.methods[i];
        analytics[key] = analytics.factory(key);
      }
      analytics.load = function(key, options){
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = 'https://cdn.segment.com/analytics.js/v1/'
          + key + '/analytics.min.js';
        var first = document.getElementsByTagName('script')[0];
        first.parentNode.insertBefore(script, first);
        analytics._loadOptions = options;
      };
      analytics.SNIPPET_VERSION = '4.1.0';
  
      analytics.load(apiKey, options);
    },
  
    /* Segment does not have revenue api, @see https://segment.com/docs/spec/track/#properties */
    logEvent: function logEvent(eventName, eventProperties, integrations) {
      if (typeof window === 'undefined') { return; }
      window.analytics.track(eventName, eventProperties, Object.assign({}, {integrations: integrations}));
    },
  
    setUserProperties: function setUserProperties(userProperties, integrations) {
      if (typeof window === 'undefined') { return; }
      window.analytics.identify(userProperties, Object.assign({}, {integrations: integrations}));
    },
  
    identify: function identify(userId, integrations) {
      if (typeof window === 'undefined') { return; }
      window.analytics.identify(userId, {}, Object.assign({}, {integrations: integrations}));
    },
  
    unidentify: function unidentify(integrations) {
      if (typeof window === 'undefined') { return; }
      window.analytics.identify(null, {}, Object.assign({}, {integrations: integrations}));
    },
  
    page: function page(eventName, eventProperties, integrations) {
      if (typeof window === 'undefined') { return; }
      window.analytics.page(eventName, eventProperties, Object.assign({}, {integrations: integrations}));
    },
  };
  
    var Platform = {
      MOBILE: "Mobile",
      DESKTOP: "Desktop",
    };
  
    var WhyButtonSource = {
      WHY_BOOK_WITH_US: "WHY BOOK WITH US",
      LEARN_MORE: "LEARN MORE",
    };
  
    var ContactMethod = {
      CALL: "Call",
      MESSAGE: "Message",
      INTERCOM: "Intercom",
      LETS_TALK: "Let's talk",
    };
  
    function assertBookingButtonLabel(bookingButtonLabel, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("2WmMHLsjUE", label_ ? 'booking_button_label' + ': ' + label_ : 'booking_button_label', bookingButtonLabel));
      return messages;
    }
  
    function assertOptionalPlatform(platform, label_) {
      var messages = [];
      if (platform !== undefined && platform !== null) {
        messages = messages.concat(AvoAssert.assertString("E_0ojvY6FW", label_ ? 'platform' + ': ' + label_ : 'platform', platform));
        if ("Mobile" !== platform && "Desktop" !== platform) {
          var message = (label_ ? 'platform' + ': ' + label_ : 'platform') + " should match one of the following values [ Mobile | Desktop ] but you provided the value " + platform
          messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "E_0ojvY6FW", message: message}]);
        }
      }
      return messages;
    }
  
    function assertWhyButtonSource(whyButtonSource, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("Ksmm5TcUs0", label_ ? 'why_button_source' + ': ' + label_ : 'why_button_source', whyButtonSource));
      if ("WHY BOOK WITH US" !== whyButtonSource &&
            "LEARN MORE" !== whyButtonSource) {
        var message = (label_ ? 'why_button_source' + ': ' + label_ : 'why_button_source') + " should match one of the following values [ WHY BOOK WITH US | LEARN MORE ] but you provided the value " + whyButtonSource
        messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "Ksmm5TcUs0", message: message}]);
      }
      return messages;
    }
  
    function assertPage(page, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("N6aDd07Es", label_ ? 'page' + ': ' + label_ : 'page', page));
      return messages;
    }
  
    function assertOptionalSection(section, label_) {
      var messages = [];
      if (section !== undefined && section !== null) {
        messages = messages.concat(AvoAssert.assertString("TApVZrNlc", label_ ? 'section' + ': ' + label_ : 'section', section));
      }
      return messages;
    }
  
    function assertOptionalFooterLinkSection(footerLinkSection, label_) {
      var messages = [];
      if (footerLinkSection !== undefined && footerLinkSection !== null) {
        messages = messages.concat(AvoAssert.assertString("XI9_hz9sHj", label_ ? 'footer_link_section' + ': ' + label_ : 'footer_link_section', footerLinkSection));
      }
      return messages;
    }
  
    function assertSegmentPageName_(segmentPageName_, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("avo-enriched-type-page-segment-name", label_ ? 'Segment: Page Name' + ': ' + label_ : 'Segment: Page Name', segmentPageName_));
      return messages;
    }
  
    function assertOptionalFooterLink(footerLink, label_) {
      var messages = [];
      if (footerLink !== undefined && footerLink !== null) {
        messages = messages.concat(AvoAssert.assertString("dTboYXqtY5", label_ ? 'footer_link' + ': ' + label_ : 'footer_link', footerLink));
      }
      return messages;
    }
  
    function assertFoodTruckName(foodTruckName, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("o-eWi3CFgw", label_ ? 'food_truck_name' + ': ' + label_ : 'food_truck_name', foodTruckName));
      return messages;
    }
  
    function assertOptionalFooterLinkLabel(footerLinkLabel, label_) {
      var messages = [];
      if (footerLinkLabel !== undefined && footerLinkLabel !== null) {
        messages = messages.concat(AvoAssert.assertString("q_6yK-Ql7R", label_ ? 'footer_link_label' + ': ' + label_ : 'footer_link_label', footerLinkLabel));
      }
      return messages;
    }
  
    function assertContactMethod(contactMethod, label_) {
      var messages = [];
      messages = messages.concat(AvoAssert.assertString("uU28EvNtO", label_ ? 'contact_method' + ': ' + label_ : 'contact_method', contactMethod));
      if ("Call" !== contactMethod && "Message" !== contactMethod &&
            "Intercom" !== contactMethod && "Let's talk" !== contactMethod) {
        var message = (label_ ? 'contact_method' + ': ' + label_ : 'contact_method') + " should match one of the following values [ Call | Message | Intercom | Let's talk ] but you provided the value " + contactMethod
        messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "uU28EvNtO", message: message}]);
      }
      return messages;
    }
  
    function setup_(options, systemProperties, destinationOptions) {
      __WEB_DEBUGGER__ = false;
      if (options.validateProperties === true) {
        __AVO_DEV__ = true;
      }
  
      destinationOptions = destinationOptions || {};
  
      if (options.useProductionKey) {
        SegmentUXExperiments.make(
          "oOUTGmY7x0k2Pz42tnTQ89TQKfIOG0z4",
          destinationOptions.segmentUxExperiments
        );
      } else {
        SegmentUXExperiments.make(
          "oOUTGmY7x0k2Pz42tnTQ89TQKfIOG0z4",
          destinationOptions.segmentUxExperiments
        );
      }
      if (__AVO_DEV__) {
        // debug console in Avo
        _avo_invoke_meta(__AVO_ENV__, 'setup', [], 'setup');
      }
    }
  
    function initAvo(options, systemProperties, destinationOptions) {
      if (__AVO_ENV__ !== null) {
        return;
      }
      __AVO_ENV__ = options.env.toLowerCase();
      if (options.strict !== undefined) {
        __STRICT__ = options.strict !== false;
      }
      if (options.reportFailureAs !== undefined) {
        __REPORT_FAILURE_AS__ = options.reportFailureAs;
      }
      __WEB_DEBUGGER__ = (typeof window !== 'undefined' && window.location.search.indexOf("avo_debug=1") > -1) || (options.webDebugger !== false && __AVO_ENV__ !== 'prod');
      if (__AVO_ENV__ !== 'prod') {
        __AVO_DEV__ = true;
      }
  
      destinationOptions = destinationOptions || {};
  
      if (__WEB_DEBUGGER__) {
  (function() {
    if (typeof window === 'undefined') { return; }
    var init = function() {
      var iframe = document.createElement("iframe");
      document.body.appendChild(iframe);
      iframe.id = "avo-debugger";
      iframe.src = "https://www.avo.app/_debugger";
      iframe.style = "display: none;";
    };
  
    if (document.body) {
      init();
    } else {
      document.addEventListener('DOMContentLoaded', init);
    }
  })();
  
      }
      if (__AVO_ENV__ === 'prod') {
        SegmentUXExperiments.make(
          "oOUTGmY7x0k2Pz42tnTQ89TQKfIOG0z4",
          destinationOptions.segmentUxExperiments
        );
      }
      if (__AVO_ENV__ === 'dev') {
        SegmentUXExperiments.make(
          "oOUTGmY7x0k2Pz42tnTQ89TQKfIOG0z4",
          destinationOptions.segmentUxExperiments
        );
      }
      if (__AVO_DEV__) {
        // debug console in Avo
        _avo_invoke_meta(__AVO_ENV__, 'init', [], 'init');
      }
    }
  
    /**
     * Contact Us Interaction: Event sent when a user clicks one of the contact us methods
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     * @param {string} properties.segmentPageName_ - Name of the page.
     * @param {string} properties.contactMethod - The method to contact Eatgeek associated with this event
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/xSYODg249}
     */
    function contactUsInteraction(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(assertSegmentPageName_(properties.segmentPageName_));
        messages = messages.concat(assertContactMethod(properties.contactMethod));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Contact Us Interaction", Object.keys(properties), [
          "page",
          "section",
          "segmentPageName_",
          "contactMethod"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "xSYODg249", "5702052046b5cdf8799219afc544f2dcdd4c896504d11b7f9ef5628645d20ed4", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Contact Us Interaction", {
          "page": properties.page,
          "section": properties.section,
          "contact_method": properties.contactMethod,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("xSYODg249", "Contact Us Interaction", messages, [
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          {id: "uU28EvNtO", name: "contact_method", value: properties.contactMethod},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Contact Us Interaction': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.page(properties.segmentPageName_, {
        "page": properties.page,
        "section": properties.section,
        "contact_method": properties.contactMethod,
        }, {});
    }
  
    /**
     * Intercom Chat Initiated: Event sent when user clicks and initiates the Intercom Chat window
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/wem4ldTN68}
     */
    function intercomChatInitiated(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Intercom Chat Initiated", Object.keys(properties), [
          "page",
          "section"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "wem4ldTN68", "2022dcbf87562446aa9d0abf001674e9d5542abe13ca49946843ae07321664b7", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Intercom Chat Initiated", {
          "page": properties.page,
          "section": properties.section,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("wem4ldTN68", "Intercom Chat Initiated", messages, [
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Intercom Chat Initiated': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Intercom Chat Initiated", {
        "page": properties.page,
        "section": properties.section,
        }, {});
    }
  
    /**
     * Intercom Chat Abandoned: Event sent when user dismisses the Intercom Chat window
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/rYHQ6njeIn}
     */
    function intercomChatAbandoned(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Intercom Chat Abandoned", Object.keys(properties), [
          "page",
          "section"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "rYHQ6njeIn", "667b01ac457c14759db68be8e7c8ed94602353736e65feb57a9a1b29c2b326ee", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Intercom Chat Abandoned", {
          "page": properties.page,
          "section": properties.section,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("rYHQ6njeIn", "Intercom Chat Abandoned", messages, [
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Intercom Chat Abandoned': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Intercom Chat Abandoned", {
        "page": properties.page,
        "section": properties.section,
        }, {});
    }
  
    /**
     * Call Us Interaction: Event sent when user clicks the "Call us at..." link on the site
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     * @param {string} properties.platform - Indicates which platform was used (i.e. mobile or desktop)
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/XQ4VCIWQg}
     */
    function callUsInteraction(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(assertOptionalPlatform(properties.platform));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Call Us Interaction", Object.keys(properties), [
          "page",
          "section",
          "platform"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "XQ4VCIWQg", "b6a47b1d43772d244517cb4426c9a8f283d143f23cfe12006ea92958e4123976", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Call Us Interaction", {
          "page": properties.page,
          "section": properties.section,
          "platform": properties.platform,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("XQ4VCIWQg", "Call Us Interaction", messages, [
          {id: "E_0ojvY6FW", name: "platform", value: properties.platform},
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Call Us Interaction': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Call Us Interaction", {
        "page": properties.page,
        "section": properties.section,
        "platform": properties.platform,
        }, {});
    }
  
    /**
     * Page Viewed: Special page view event sent when there is a page/screen navigation in the app
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.segmentPageName_ - Name of the page.
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/DbPvdYtO8s}
     */
    function pageViewed(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertSegmentPageName_(properties.segmentPageName_));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Page Viewed", Object.keys(properties), [
          "segmentPageName_"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "DbPvdYtO8s", "da6b54de9c240e2df54a597a95044f0e3b538ec43f4b1da1f984e054cfcf6851", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Page Viewed", {}, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("DbPvdYtO8s", "Page Viewed", messages, [], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Page Viewed': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.page(properties.segmentPageName_, {}, {});
    }
  
    /**
     * Booking Initiated: No description
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     * @param {string} properties.bookingButtonLabel - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/tqKX14xt4}
     */
    function bookingInitiated(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(assertBookingButtonLabel(properties.bookingButtonLabel));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Booking Initiated", Object.keys(properties), [
          "page",
          "section",
          "bookingButtonLabel"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "tqKX14xt4", "2db59733270819c07a802825493e00ccb3d82c41a32f2e26e2c9261bc8149377", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Booking Initiated", {
          "page": properties.page,
          "section": properties.section,
          "booking_button_label": properties.bookingButtonLabel,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("tqKX14xt4", "Booking Initiated", messages, [
          {id: "2WmMHLsjUE", name: "booking_button_label", value: properties.bookingButtonLabel},
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Booking Initiated': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Booking Initiated", {
        "page": properties.page,
        "section": properties.section,
        "booking_button_label": properties.bookingButtonLabel,
        }, {});
    }
  
    /**
     * Booking Completed: No description
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.page - no description
     * @param {string} properties.section - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/jTox46StQz}
     */
    function bookingCompleted(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertPage(properties.page));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Booking Completed", Object.keys(properties), [
          "page",
          "section"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "jTox46StQz", "061d75a3c42e958b5e9359d27cebf958f6a27912ce76f07d07e198bdfc0cbfc4", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Booking Completed", {
          "page": properties.page,
          "section": properties.section,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("jTox46StQz", "Booking Completed", messages, [
          {id: "N6aDd07Es", name: "page", value: properties.page},
          {id: "TApVZrNlc", name: "section", value: properties.section},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Booking Completed': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Booking Completed", {
        "page": properties.page,
        "section": properties.section,
        }, {});
    }
  
    /**
     * Food Truck Image Interaction: No description
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.foodTruckName - no description
     * @param {string} properties.section - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/8dx1BeUHmm}
     */
    function foodTruckImageInteraction(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertFoodTruckName(properties.foodTruckName));
        messages = messages.concat(assertOptionalSection(properties.section));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Food Truck Image Interaction", Object.keys(properties), [
          "foodTruckName",
          "section"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "8dx1BeUHmm", "8518d89fe9cb7da341c0bb8ad796d10756252b0740bf8041d0d498943cf37959", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Food Truck Image Interaction", {
          "food_truck_name": properties.foodTruckName,
          "section": properties.section,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("8dx1BeUHmm", "Food Truck Image Interaction", messages, [
          {id: "TApVZrNlc", name: "section", value: properties.section},
          {id: "o-eWi3CFgw", name: "food_truck_name", value: properties.foodTruckName},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Food Truck Image Interaction': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Food Truck Image Interaction", {
        "food_truck_name": properties.foodTruckName,
        "section": properties.section,
        }, {});
    }
  
    /**
     * Why Book Interaction: No description
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.whyButtonSource - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/3I6ABzFlyv}
     */
    function whyBookInteraction(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertWhyButtonSource(properties.whyButtonSource));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Why Book Interaction", Object.keys(properties), [
          "whyButtonSource"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "3I6ABzFlyv", "4f685a7e6e8af7882e3b44996c1aee71c58c8e270c83a90a7c6cb4fd9e81fad6", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Why Book Interaction", {
          "why_button_source": properties.whyButtonSource,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("3I6ABzFlyv", "Why Book Interaction", messages, [
          {id: "Ksmm5TcUs0", name: "why_button_source", value: properties.whyButtonSource},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Why Book Interaction': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Why Book Interaction", {
        "why_button_source": properties.whyButtonSource,
        }, {});
    }
  
    /**
     * Footer Interaction: No description
     *
     * @param {object} properties - the properties associatied with this event
     * @param {string} properties.footerLink - no description
     * @param {string} properties.footerLinkLabel - no description
     * @param {string} properties.footerLinkSection - no description
     *
     * @see {@link https://www.avo.app/schemas/ZMwnebQikC6pCSNEAgJH/branches/sHqyo1rdT/events/fzUKbKfGjX}
     */
    function footerInteraction(properties) {
      properties = properties || {};
      if (__AVO_DEV__ || __WEB_DEBUGGER__) {
        // assert properties
        var messages = [];
        messages = messages.concat(assertOptionalFooterLink(properties.footerLink));
        messages = messages.concat(assertOptionalFooterLinkLabel(properties.footerLinkLabel));
        messages = messages.concat(assertOptionalFooterLinkSection(properties.footerLinkSection));
        messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Footer Interaction", Object.keys(properties), [
          "footerLink",
          "footerLinkLabel",
          "footerLinkSection"
        ]));
        // debug console in Avo
        _avo_invoke(__AVO_ENV__, "fzUKbKfGjX", "af2108424f0755c0a17f895473b90fd67c168a7a4e33ececc7ce8ff2c897b07c", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
  
        AvoLogger.logEventSent("Footer Interaction", {
          "footer_link": properties.footerLink,
          "footer_link_label": properties.footerLinkLabel,
          "footer_link_section": properties.footerLinkSection,
          }, {});
        if (__WEB_DEBUGGER__) {
          // Avo web debugger
          _avo_debugger_log("fzUKbKfGjX", "Footer Interaction", messages, [
          {id: "XI9_hz9sHj", name: "footer_link_section", value: properties.footerLinkSection},
          {id: "dTboYXqtY5", name: "footer_link", value: properties.footerLink},
          {id: "q_6yK-Ql7R", name: "footer_link_label", value: properties.footerLinkLabel},
          ], []);
        }
        if (__STRICT__ === null || __STRICT__) {
          // throw exception if messages is not empty
          if (messages.length !== 0) {
            throw new Error("Error sending event 'Footer Interaction': " + messages[0].message)
          }
        } else {
          messages.forEach(function(m) {
            console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
          });
        }
      }
  
      // destination SegmentUXExperiments
      SegmentUXExperiments.logEvent("Footer Interaction", {
        "footer_link": properties.footerLink,
        "footer_link_label": properties.footerLinkLabel,
        "footer_link_section": properties.footerLinkSection,
        }, {});
    }
  
    exports.Platform = Platform;
    exports.WhyButtonSource = WhyButtonSource;
    exports.ContactMethod = ContactMethod;
    exports.contactUsInteraction = contactUsInteraction;
    exports.intercomChatInitiated = intercomChatInitiated;
    exports.intercomChatAbandoned = intercomChatAbandoned;
    exports.callUsInteraction = callUsInteraction;
    exports.pageViewed = pageViewed;
    exports.bookingInitiated = bookingInitiated;
    exports.bookingCompleted = bookingCompleted;
    exports.foodTruckImageInteraction = foodTruckImageInteraction;
    exports.whyBookInteraction = whyBookInteraction;
    exports.footerInteraction = footerInteraction;
    exports.setup_ = setup_;
    exports.initAvo = initAvo;
  }(typeof exports === 'undefined' ? this.Avo = {} : exports));
  
  // AVOMODULEMAP:"Avo"
  // AVOEVENTMAP:["contactUsInteraction","intercomChatInitiated","intercomChatAbandoned","callUsInteraction","pageViewed","bookingInitiated","bookingCompleted","foodTruckImageInteraction","whyBookInteraction","footerInteraction"]
  